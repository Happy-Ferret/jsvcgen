#!/usr/bin/env python3
"""Copyright (c) 2014 by Travis Gockel. All rights reserved.

This program is free software: you can redistribute it and/or modify it under the terms of the Apache License
as published by the Apache Software Foundation, either version 2 of the License, or (at your option) any later
version.

Travis Gockel (travis@gockelhut.com)"""
from jsvcgen import *
import argparse
import json
import sys
import os

def all_files_recursive(directory):
    """Recursively yields all files in a directory."""
    for root, dirs, files in os.walk(directory):
        for filename in files:
            yield os.path.join(root, filename)

def nested_merge(a, b):
    if type(a) != type(b):
        raise TypeError('Cannot merge values of different type {} and {}'.format(a, b))
    if not isinstance(a, dict):
        raise TypeError('Only know how to merge dicts, not {} and {}'.format(a, b))
    
    out = {}
    for key, value in a.items():
        if key in b:
            out[key] = nested_merge(value, b[key])
        else:
            out[key] = value
    
    for key, value in b.items():
        if key not in out:
            out[key] = value
    
    return out

def load_description(path):
    if os.path.isfile(path):
        with open(path) as f:
            return json.load(f)
    elif os.path.isdir(path):
        out = {}
        for filename in filter(lambda x: x.endswith('.json'), all_files_recursive(path)):
            with open(filename) as f:
                fj = json.load(f)
            out = nested_merge(out, fj)    
        return out
    else:
        raise FileNotFoundError()

def main(args):
    generator = generators.get_generator(args.lang, args)
    j = load_description(args.description)
    description = ServiceDescription.load_from_json(j)
    generator.generate(description, args.output)

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Code generator for JSON-RPC web services.')
    parser.add_argument('description',
                        type=str,
                        help='JSON service description input file.'
                       )
    parser.add_argument('output',
                        type=str,
                        help='Output destination -- where to put the generated code.'
                       )
    parser.add_argument('--lang',
                        default='java',
                        type=str,
                        help=''
                       )
    parser.add_argument('--namespace',
                        default='com.example',
                        type=str,
                        help='For namespace-based languages (such as Java), what namespace should the generated code be put in?'
                       )
    main(parser.parse_args())
