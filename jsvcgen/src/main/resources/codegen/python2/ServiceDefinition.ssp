<% import com.solidfire.jsvcgen.model._ %>
<%  %>
<%@ val options: CliConfig %>
<%@ val value:   ServiceDefinition %>
<%@ val format:  PythonCodeFormatter %>
<% val allSettings = Map("options" -> options, "value" -> value, "format" -> format) %>
<% val serviceBase = options.serviceBase.getOrElse("ServiceBase") %>
<% import format._ %>
#if (options.headerTemplate.isEmpty)
${render("HeaderTemplate.ssp")}
#else
${codegen.Util.layoutTemplate(options.headerTemplate.get, allSettings)}
#end
import json

class ${getTypeName(value.serviceName)}(${serviceBase}):
#if (!value.documentation.isEmpty)
${getCodeDocumentation(value.documentation.get, "    ")}
#end
#for (method <- value.methods)
    def ${getMethodName(method)}(${getParameterList(method.params)}):
#if (!method.documentation.isEmpty)
${getCodeDocumentation(method.documentation.get, "        ")}
#end
        params = ${getParameterDict(method.params)}
#for (param <- method.params if param.parameterType.isOptional)
        if ${getVariableName(param.name)} != DEFAULT:
            params["${param.name}"] = ${getVariableName(param.name)}
#end
        return self._send_request('${method.name}', ${getTypeName(method.returnInfo)}, params)
#end

#for (typ <- format.ordered(value.types))
${render("TypeTemplate.ssp", allSettings ++
                             Map("value" -> typ)
        )}
#end
