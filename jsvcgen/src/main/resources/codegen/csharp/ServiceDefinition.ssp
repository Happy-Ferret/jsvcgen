<% import com.solidfire.jsvcgen.model._ %>
<%  %>
<%@ val options: CliConfig %>
<%@ val value:   ServiceDefinition %>
<%@ val format:  CSharpCodeFormatter %>
<% val allSettings = Map("options" -> options, "value" -> value, "format" -> format) %>
<% import format._ %>
#if (options.headerTemplate.isEmpty)
${render("HeaderTemplate.ssp")}
#else
${codegen.Util.layoutTemplate(options.headerTemplate.get, allSettings)}
#end

#if (!value.documentation.isEmpty)
${getCodeDocumentation(value.documentation.get, "")}
#end
public class ${getTypeName(value.serviceName)} :
        ${options.serviceBase.getOrElse("solidfire.JsvcGen.JsonRpcServiceBase")}
{
#if (options.serviceCtorTemplate.isEmpty)
${render("ConstructorTemplate.ssp", allSettings)}
#else
${codegen.Util.layoutTemplate(options.serviceCtorTemplate.get, allSettings)}
#end
#for (method <- value.methods)
    
#if (!method.documentation.isEmpty)
${getCodeDocumentation(method.documentation.get, "    ")}
#end
    public async ${getResultType(method.returnInfo)} ${getMethodName(method)}(${getParameterList(method.params)})
    {
        var obj = new {${getParameterUseList(method.params)}};
#if (method.returnInfo.isEmpty)
        await base.SendRequest("${method.name}", obj);
#else
        return await base.SendRequest<${getTypeName(method.returnInfo.get.returnType)}>("${method.name}", obj);
#end
    }
#end
}

#if (options.footerTemplate.isEmpty)
${render("FooterTemplate.ssp")}
#else
${codegen.Util.layoutTemplate(options.footerTemplate.get, allSettings)}
#end
