<% import com.solidfire.jsvcgen.model._ %>
<%  %>
<%  %>
<%@ val options:        CliConfig %>
<%@ val value:          TypeDefinition %>
<%@ val format:         CSharpCodeFormatter %>
<% val allSettings = Map("options" -> options, "value" -> value, "format" -> format) %>
<% import format._ %>
<% val typeName = getTypeName(value.name) %>

${render("HeaderTemplate.ssp")}

#if (!value.documentation.isEmpty)
${getCodeDocumentation(value.documentation.get, "")}
#end
#if (value.alias.isEmpty)
public class ${typeName}
{
#for (member <- value.members)
    [JsonProperty("${member.name}")]
    public ${getTypeName(member.memberType.typeName)} ${getPropertyName(member)} { get; set; }
    
#end
}
#else
using ${typeName} = ${getTypeName(value.alias.get)};
#end

}
