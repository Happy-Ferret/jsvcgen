<% import com.solidfire.jsvcgen.model._ %>
<%  %>
<%  %>
<%@ val options:        CliConfig %>
<%@ val value:          TypeDefinition %>
<%@ val format:         CSharpCodeFormatter %>
<% val allSettings = Map("options" -> options, "value" -> value, "format" -> format) %>
<% import format._ %>
<% val typeName = getTypeName(value.name) %>

#if (options.headerTemplate.isEmpty)
    ${render("HeaderTemplate.ssp")}
#else
    ${codegen.Util.layoutTemplate(options.headerTemplate.get, allSettings)}
#end

#if (!value.documentation.isEmpty)
${getCodeDocumentation(value.documentation.get, "")}
#end
[DataContract]
public class ${typeName}:
     ${options.requestBase.getOrElse("solidfire.jsvcgen.JsonRpcRequestBase")}
{
#for (member <- value.members)
    ${getSinceAttribute(member)}
    ${getDeprecatedAttribute(member)}
#if(member.memberType.isOptional)
    [Optional]
#end
    [DataMember(Name="${member.name}")]
    public ${getTypeName(member.memberType)} ${getPropertyName(member)} { get; set; }
#end
    }
}
