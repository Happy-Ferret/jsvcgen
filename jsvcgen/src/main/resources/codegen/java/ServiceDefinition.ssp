<% import com.gockelhut.jsvcgen.model._ %>
<% import com.gockelhut.jsvcgen.codegen.{CliConfig, JavaCodeFormatter, Util} %>
<%@ val options: CliConfig %>
<%@ val value:   ServiceDefinition %>
<%@ val format:  JavaCodeFormatter %>
<% val allSettings = Map("options" -> options, "value" -> value, "format" -> format) %>
<% import format._ %>
package ${options.namespace};

#if (!value.documentation.isEmpty)
${getCodeDocumentation(value.documentation.get, "")}
#end
public class ${getTypeName(value.serviceName)}
        extends ${options.serviceBase.getOrElse("com.gockelhut.jsvcgen.JsonRpcServiceBase")} {
#if (options.serviceCtorTemplate.isEmpty)
${render("ConstructorTemplate.ssp", allSettings)}
#else
${Util.layoutTemplate(options.serviceCtorTemplate.get, allSettings)}
#end
#for (method <- value.methods)
    
#if (!method.documentation.isEmpty)
${getCodeDocumentation(method.documentation.get, "    ")}
#end
    public ${getTypeName(method.returnInfo)} ${getMethodName(method)}(${getParameterList(method.params)}) {
        return super.sendRequest("${method.name}",
                                 new ${getTypeName(method.name)}Request(${getParameterUseList(method.params)}),
                                 ${getTypeName(method.name)}Request.class,
                                 ${getTypeName(method.returnInfo)}.class
                                );
    }
#end
}
