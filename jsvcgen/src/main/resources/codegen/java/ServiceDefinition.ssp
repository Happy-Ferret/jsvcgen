<% import com.solidfire.jsvcgen.model._ %>
<% import com.solidfire.jsvcgen.codegen.{CliConfig, JavaCodeFormatter, Util} %>
<%@ val options: CliConfig %>
<%@ val value:   ServiceDefinition %>
<%@ val format:  JavaCodeFormatter %>
<% val allSettings = Map("options" -> options, "value" -> value, "format" -> format) %>
<% import format._ %>
#if (options.headerTemplate.isEmpty)
${render("HeaderTemplate.ssp")}
#else
${codegen.Util.layoutTemplate(options.headerTemplate.get, allSettings)}
#end

#if (value.documentation.isDefined && value.isInterface)
    ${getCodeDocumentation(value.documentation.get.lines, "", Option.empty)}
#end
#if (value.isInterface)
public interface ${getTypeName(value.serviceName)} {
#else
public class ${getTypeName(value.serviceName)}
    extends ${options.serviceBase.getOrElse("com.solidfire.jsvcgen.JsonRpcServiceBase")}
    implements ${getTypeName(value.serviceName)}IF {
#end
#if (!value.isInterface)
#if (options.serviceCtorTemplate.isEmpty)
${render("ConstructorTemplate.ssp", allSettings)}
#else
${codegen.Util.layoutTemplate(options.serviceCtorTemplate.get, allSettings)}
#end
#end

#for (method <- value.methods.filter(method => options.release.contains(method.release)))
${getServiceMethod(method, value.serviceName, value.isInterface, true)}
#if (method.params.length <= 3 )
${getServiceMethod(method, value.serviceName, value.isInterface, false)}
#end
#end
}