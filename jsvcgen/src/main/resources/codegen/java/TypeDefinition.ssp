<%--
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
--%>
<% import com.solidfire.jsvcgen.model._ %>
<% import com.solidfire.jsvcgen.codegen.{CliConfig, Util} %>
<% import com.solidfire.jsvcgen.codegen.JavaCodeFormatter %>
<%@ val options:        CliConfig %>
<%@ val value:          TypeDefinition %>
<%@ val format:         JavaCodeFormatter %>
<%@ val accessModifier: String = "public" %>
<%@ val immutableTypes: Boolean = true %>
<%@ val includeHeader:  Boolean = true %>
<% val allSettings = Map("options" -> options, "value" -> value, "format" -> format) %>
<% import format._ %>
<%  val typeName = getTypeName(value.name) %>
#if (includeHeader)
#if (options.headerTemplate.isEmpty)
${render("HeaderTemplate.ssp")}
#else
${Util.layoutTemplate(options.headerTemplate.get, allSettings)}
#end
#end

${getCodeDocumentation( getClassDocumentation(value).take(1), "", Option.empty ) }
${accessModifier} class ${typeName} implements Serializable {

    private static final long serialVersionUID = ${value.hashCode().toString.replace(",","")}L;

#for (member <- value.members)
    private #if (immutableTypes)final #end ${getTypeName(member.typeUse)} ${getFieldName(member)};
#end

${getConstructors(value)}
#for (member <- value.members)
#if (member.documentation.isDefined)
${getCodeDocumentation(member.documentation.get.lines, s"""    """, member.since )}
#end
#if(member.since.isDefined)
    @Since("${member.since}")
#end
    ${accessModifier} ${getTypeName(member.typeUse)} ${getMemberAccessorName(member)}() {
        return this.${getFieldName(member)};
    }
#if (!immutableTypes)
    ${accessModifier} void ${getMemberMutatorName(member)}(${getTypeName(member.typeUse)} ${getFieldName(member)}) {
        this.${getFieldName(member)} = ${getFieldName(member)};
    }
#end
#end

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
#if (value.members.isEmpty)
        return true;
#else
        ${typeName} that = (${typeName}) o;
        #{
            def methodEquals(x: Member): String = {
                var fieldName = getFieldName(x)

                x match {
                    case x if x.typeUse.isArray => s"""Objects.deepEquals( ${fieldName} , that.${fieldName} )"""
                    case _ => s"""Objects.equals( ${fieldName} , that.${fieldName} )"""
                }
            }

            val equalsCalls = value.members.map( (x: Member)  => methodEquals(x) ).mkString("\n            && ")
        }#

        return ${equalsCalls};
#end
    }

${renderHashCode(value)}
#if (!value.members.isEmpty)
    @Override
    public String toString() {
        final StringBuilder sb = new StringBuilder();
        sb.append( "{ " );
#{  def methodToString(x: Member): String = {
        var fieldName = getFieldName(x)

        x match {
            case x if !x.typeUse.isOptional && x.typeUse.isArray  =>
                s"""        sb.append(" ${fieldName} : ").append(Arrays.toString(${fieldName}))"""
            case x if x.typeUse.isOptional && !x.typeUse.isArray =>
                s"""        if(null != ${fieldName} && ${fieldName}.isPresent())\n""" +
                s"""            sb.append(" ${fieldName} : ").append(${fieldName}.get())"""
            case x if x.typeUse.isOptional && x.typeUse.isArray =>
                s"""        if(null != ${fieldName} && ${fieldName}.isPresent())\n""" +
                s"""            sb.append(" ${fieldName} : ").append(Arrays.toString(${fieldName}.get()))"""
            case x if getTypeName(x.typeUse).contains("String") =>
                s"""        sb.append(" ${fieldName} : ").append(${fieldName})"""
            case _ =>
                s"""        sb.append(" ${fieldName} : ").append(${fieldName})"""
        }
    }
    val toStringCalls = value.members.map( (x: Member) => methodToString(x) ).mkString(s""".append(",");\n""")
}#
${toStringCalls};
        sb.append( " }" );

        if(sb.lastIndexOf(", }") != -1)
            sb.deleteCharAt(sb.lastIndexOf(", }"));

        return sb.toString();
    }
#end
#if (value.name.endsWith("Request") && !value.members.isEmpty)
${getRequestBuilder(value)}
#end
}