<% import com.gockelhut.jsvcgen.model._ %>
<% import com.gockelhut.jsvcgen.codegen.CliConfig %>
<% import com.gockelhut.jsvcgen.codegen.JavaCodeGenerator._ %>
<%@ val options:        CliConfig %>
<%@ val value:          TypeDefinition %>
<%@ val immutableTypes: Boolean = false %>
<%  val typeName = getTypeName(value.name) %>
package ${options.namespace};

#if (!value.documentation.isEmpty)
${getCodeDocumentation(value.documentation.get, "")}
#end
public class ${typeName} {
#for (member <- value.members)
    #if (immutableTypes)final #end ${getTypeName(member.memberType)} ${getFieldName(member)};
#end
    
    public ${typeName}(${getParameterListForMembers(value.members)}) {
#for (member <- value.members)
        this.${getFieldName(member)} = ${getFieldName(member)};
#end
    }
    
#for (member <- value.members)
#if (!member.documentation.isEmpty)
${getCodeDocumentation(member.documentation.get, "    ")}
#end
    ${getTypeName(member.memberType)} ${getMemberAccessorName(member)}() {
        return this.${getFieldName(member)};
    }
#if (!immutableTypes)
    void ${getMemberMutatorName(member)}() {
        return this.${getFieldName(member)};
    }
    
#end
#end
}