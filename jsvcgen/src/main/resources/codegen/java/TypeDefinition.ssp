<% import com.solidfire.jsvcgen.model._ %>
<% import com.solidfire.jsvcgen.codegen.{CliConfig, Util} %>
<% import com.solidfire.jsvcgen.codegen.JavaCodeFormatter %>
<%@ val options:        CliConfig %>
<%@ val value:          TypeDefinition %>
<%@ val format:         JavaCodeFormatter %>
<%@ val accessModifier: String = "public" %>
<%@ val immutableTypes: Boolean = false %>
<%@ val includeHeader:  Boolean = true %>
<% val allSettings = Map("options" -> options, "value" -> value, "format" -> format) %>
<% import format._ %>
<%  val typeName = getTypeName(value.name) %>
#if (includeHeader)
    #if (options.headerTemplate.isEmpty)
    ${render("HeaderTemplate.ssp")}
    #else
    ${Util.layoutTemplate(options.headerTemplate.get, allSettings)}
    #end
#end

#if (!value.documentation.isEmpty)
    ${getCodeDocumentation(value.documentation.get, "")}
#end
    ${accessModifier} class ${typeName} {

#for (member <- value.members)
        private #if (immutableTypes)final #end ${getTypeName(member.memberType)} ${getFieldName(member)};
#end

        public ${typeName}(${getParameterListForMembers(value.members)}) {
#for (member <- value.members)
            this.${getFieldName(member)} = ${getFieldName(member)};
#end
        }
#for (member <- value.members)
    #if (!member.documentation.isEmpty)
${getCodeDocumentation(member.documentation.get, "        ")}
    #end
    ${accessModifier} ${getTypeName(member.memberType)} ${getMemberAccessorName(member)}() {
            return this.${getFieldName(member)};
    }
    #if (!immutableTypes)
    ${accessModifier} void ${getMemberMutatorName(member)}(${getTypeName(member.memberType)} ${getFieldName(member)}) {
        this.${getFieldName(member)} = ${getFieldName(member)};
    }
    #end
#end

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
#if (value.members.isEmpty)
        return true;
#else
        ${typeName} that = (${typeName}) o;
        #{ val equalsMembers = value.members.map( (x: Member) ⇒ getFieldName(x))
           val equalsCall = equalsMembers.map( (member: String) ⇒ "Objects.equals(" + member + ", " + "that." + member + ")" ).mkString("\n            && ") }#
        return ${equalsCall} ;
#end
    }

    @Override
    public int hashCode() {
#if (value.members.isEmpty)
        return this.getClass().hashCode();
#elseif (value.members.length == 1)
        return Objects.hash( (Object) ${value.members.map( (x: Member) ⇒ getFieldName(x) )} );
#else
        return Objects.hash( ${value.members.map( (x: Member) ⇒ getFieldName(x) ).mkString(", ")} );
#end
    }

#if (!value.members.isEmpty)
    @Override
    public String toString() {
        final StringBuilder sb = new StringBuilder();
        sb.append( "{ " );
    #{ val toStringMembers = value.members.map( (x: Member) ⇒ getFieldName(x)) }#
    #for (member <- toStringMembers )
        sb.append(" ${member} : \"").append(${member}).append("\",");
    #end
        sb.deleteCharAt(sb.lastIndexOf(",")).append( " }" );

        return sb.toString();
    }
#end
}