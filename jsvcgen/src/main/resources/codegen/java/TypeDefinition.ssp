<% import com.solidfire.jsvcgen.model._ %>
<% import com.solidfire.jsvcgen.codegen.{CliConfig, Util} %>
<% import com.solidfire.jsvcgen.codegen.JavaCodeFormatter %>
<%@ val options:        CliConfig %>
<%@ val value:          TypeDefinition %>
<%@ val format:         JavaCodeFormatter %>
<%@ val accessModifier: String = "public" %>
<%@ val immutableTypes: Boolean = true %>
<%@ val includeHeader:  Boolean = true %>
<% val allSettings = Map("options" -> options, "value" -> value, "format" -> format) %>
<% import format._ %>
<%  val typeName = getTypeName(value.name) %>
#if (includeHeader)
    #if (options.headerTemplate.isEmpty)
    ${render("HeaderTemplate.ssp")}
    #else
    ${Util.layoutTemplate(options.headerTemplate.get, allSettings)}
    #end
#end

${getCodeDocumentation( getClassDocumentation(value).take(1), "", Option.empty ) }
${accessModifier} class ${typeName} {

#for (member <- value.members)
    private #if (immutableTypes)final #end ${getTypeName(member.memberType)} ${getFieldName(member)};
#end
    ${getConstructors(value)}
#for (member <- value.members)
    #if (member.documentation.isDefined)
${getCodeDocumentation(member.documentation.get.lines, s"""        """, member.since )}
    #end
    #if(member.since.isDefined)
        @Since("${member.since}")
    #end
    ${accessModifier} ${getTypeName(member.memberType)} ${getMemberAccessorName(member)}() {
            return this.${getFieldName(member)};
    }
    #if (!immutableTypes)
    ${accessModifier} void ${getMemberMutatorName(member)}(${getTypeName(member.memberType)} ${getFieldName(member)}) {
        this.${getFieldName(member)} = ${getFieldName(member)};
    }
    #end
#end

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
#if (value.members.isEmpty)
        return true;
#else
        ${typeName} that = (${typeName}) o;
        #{
            def methodEquals(x: Member): String = {
                var fieldName = getFieldName(x)

                x match {
                    case x if x.memberType.isArray => s"""Objects.deepEquals( ${fieldName} , that.${fieldName} )"""
                    case _ => s"""Objects.equals( ${fieldName} , that.${fieldName} )"""
                }
            }

            val equalsCalls = value.members.map( (x: Member)  => methodEquals(x) ).mkString("\n            && ")
        }#

        return ${equalsCalls};
#end
    }

    @Override
    public int hashCode() {
#if (value.members.isEmpty)
        return this.getClass().hashCode();
#elseif (value.members.length == 1)
        return Objects.hash( (Object) ${value.members.map( (x: Member) => getFieldName(x) )} );
#else
        return Objects.hash( ${value.members.map( (x: Member) => getFieldName(x) ).mkString(", ")} );
#end
    }

#if (!value.members.isEmpty)
    @Override
    public String toString() {
        final StringBuilder sb = new StringBuilder();
        sb.append( "{ " );
#{
    def methodToString(x: Member): String = {
        var fieldName = getFieldName(x)

        x match {
            case x if !x.memberType.isOptional && x.memberType.isArray  =>
                s"""        sb.append(" ${fieldName} : ").append(Arrays.toString(${fieldName}))"""
            case x if x.memberType.isOptional && !x.memberType.isArray =>
                s"""        if(null != ${fieldName} && ${fieldName}.isPresent())\n""" +
                s"""            sb.append(" ${fieldName} : ").append(${fieldName}.get())"""
            case x if x.memberType.isOptional && x.memberType.isArray =>
                s"""        if(null != ${fieldName} && ${fieldName}.isPresent())\n""" +
                s"""            sb.append(" ${fieldName} : ").append(Arrays.toString(${fieldName}.get()))"""
            case x if getTypeName(x.memberType).contains("String") =>
                s"""        sb.append(" ${fieldName} : ").append(${fieldName})"""
            case _ =>
                s"""        sb.append(" ${fieldName} : ").append(${fieldName})"""
        }
    }
    val toStringCalls = value.members.map( (x: Member) => methodToString(x) ).mkString(s""".append(",");\n""")
}#

${toStringCalls};
        sb.append( " }" );

        if(sb.lastIndexOf(", }") != -1)
            sb.deleteCharAt(sb.lastIndexOf(", }"));

    return sb.toString();
    }
#end
}